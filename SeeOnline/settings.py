"""
Django settings for SeeOnline project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z83orrf=-eu3@$b8b2p9*n4--5d^-)86pfbqi-32tkig6xoe_r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'rest_framework',
    'django_filters',
    'drf_spectacular',
    'tracker',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SeeOnline.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SeeOnline.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'seeonline',
        'USER': 'postgres',
        'PASSWORD': '256643',
        # 'HOST': '31.130.145.61',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)  # На всякий случай создадим папку, если ее нет

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # Форматтеры для логов
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },

    # Хендлеры
    'handlers': {
        # Логи в консоль (полезно в Docker и локально при разработке)
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },

        # Основной файл логов для приложения
        'app_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'app.log'),
            'formatter': 'verbose',
        },

        # Отдельный файл логов для Celery
        'celery_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'celery.log'),
            'formatter': 'verbose',
        },
        # Ротация по максимальному размеру файлов, для наглядности, достаточно не плохо для разработки

        'app_rotating_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'app.log'),
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 1024,  # Хранить 1024 архивных файла
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },

        # Ротация по дням, пойдет на проду
        # 'app_rotating_file': {
        #     'class': 'logging.handlers.TimedRotatingFileHandler',
        #     'filename': os.path.join(LOG_DIR, 'app.log'),
        #     'when': 'midnight',  # каждый день
        #     'backupCount': 14,  # хранить 14 файлов
        #     'formatter': 'verbose',
        # },
    },

    # Логгеры
    'loggers': {
        # Корневой логгер Django (используется многими внутренними компонентами)
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },

        # Наш основной логгер для кода приложения (views, serializers и тд)
        'tracker': {
            'handlers': ['console', 'app_file'],
            'level': 'DEBUG',
            'propagate': False,
        },

        # Логгер для Celery-задач
        'tracker.tasks': {
            'handlers': ['console', 'celery_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

# Настройка drf
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Настройка документации
SPECTACULAR_SETTINGS = {
    'TITLE': 'Tracker API',  # Заголовок документации
    'DESCRIPTION': 'Документация API',  # Описание
    'VERSION': '1.0.0',  # Версия API
    'SERVE_INCLUDE_SCHEMA': False,  # Отключает отображение схемы в UI
    'SWAGGER_UI_SETTINGS': {
        'operationsSorter': 'method',  # Сортировка по методу
        'tagsSorter': 'alpha',  # Алфавитная сортировка тегов
        'deepLinking': True,  # Включает ссылки на конкретные запросы
        'defaultModelRendering': 'model',  # Отображение моделей в схеме
        'defaultModelsExpandDepth': 1,  # Глубина раскрытия моделей
        'defaultModelExpandDepth': 2,  # Глубина раскрытия объекта
        'displayRequestDuration': True,  # Показывать время выполнения запроса
    },
    'COMPONENT_SPLIT_REQUEST': True,  # Разделять запросы и ответы в схемах
    'ENUM_NAME_OVERRIDES': {},  # Позволяет переименовывать ENUM
    'SORT_OPERATIONS': False,  # Сортировать эндпоинты по алфавиту
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],  # Доступ для всех
}

# Redis

REDIS_HOST = os.getenv("REDIS_HOST", "localhost")

# Redis как брокер сообщений
CELERY_BROKER_URL = f"redis://{REDIS_HOST}:6379/0"

# Хранилище результатов (опционально)
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:6379/0"

# Дополнительные настройки Celery
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'
CELERY_ENABLE_UTC = True

# Default Checker Settings

MANAGER_CHECK_INTERVAL = 5.0

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
